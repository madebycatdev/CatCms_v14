<div class="row-fluid">
    <div class="alert alert-block alert-info fade in">
        <p>Password requirements:</p>
        <ul>
            <li>Minimum @Html.Encode(ViewData["PasswordLength"])  characters</li>
            <li>Minimum 1 uppercase letter (ABCDEFGHIJKLMNOPQRSTUVWXYZ)</li>
            <li>Minimum 2 numbers (0123456789)</li>
            <li>Minimum 1 symbol (!?=#*$@Html.Raw("@")+-.)</li>
        </ul>
    </div>
</div>

@*@Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.")*@

@using (Html.BeginForm("Create", "Account", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    <div class="tabbable tabbable-custom">
        <div class="tab-content new-tab-content">

            <h3>Account Information</h3>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="username">Username:<span class="red">*</span></label>
                    <div class="controls">
                        @Html.TextBox("username", "", new { @class = "m-wrap span6 required", @autocomplete = "off", @maxlength = "10", @minlength = "3" })
                        @Html.ValidationMessage("username")
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="email">Email:<span class="red">*</span></label>
                    <div class="controls">
                        @Html.TextBox("email", "", new { @class = "m-wrap span6 required email", @autocomplete = "off" })
                        @Html.ValidationMessage("email")
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="password">Password:<span class="red">*</span></label>
                    <div class="controls">
                        @Html.Password("password", "", new { @class = "m-wrap span4 required", @autocomplete = "off" })
                        @Html.ValidationMessage("password")
                        <button type="button" class="btn blue" name="generatePassword" onclick="GeneratePassword(4,1,2,1)"><i class="icon-key icon-white"></i> Generate</button>
                        <code id="generatedPassword" class="tooltips copyToClipboard" data-placement="bottom" data-original-title="Panoya kopyalamak için tıklayın" data-toggle="tooltip" style="padding:10px !important;">########</code>
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="confirmPassword">Confirm password:<span class="red">*</span></label>
                    <div class="controls">
                        @Html.Password("confirmPassword", "", new { @class = "m-wrap span4 required", @autocomplete = "off" })
                        @Html.ValidationMessage("confirmPassword")
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="fullname">Full Name:<span class="red">*</span></label>
                    <div class="controls">
                        @Html.TextBox("fullname", "", new { @class = "m-wrap span6 required" })
                        @Html.ValidationMessage("fullname")
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="role">Role:<span class="red">*</span></label>
                    <div class="controls">
                        @if (!ViewBag.isAdmin)
                        {
                            foreach (var item in Roles.GetAllRoles())
                            {
                                if (item == "Administrator")
                                {
                                    continue;
                                }
                                <label class="smallWrap" for="Role_@item">
                                    @Html.RadioButton("Role", item, new { id = "Role_" + item })
                                    @item
                                </label>
                            }
                        }
                        else
                        {
                            foreach (var item in Roles.GetAllRoles())
                            {
                                <label class="smallWrap" for="Role_@item">
                                    @Html.RadioButton("Role", item, new { id = "Role_" + item })
                                    @item
                                </label>
                            }
                        }

                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label" for="comment">Comment:</label>
                    <div class="controls">
                        @Html.TextArea("comment", "", new { @class = "m-wrap span6", @rows = "6" })
                        @Html.ValidationMessage("comment")
                    </div>
                </div>
            </div>
            <div class="form-actions">
                <button class="btn green" type="submit" value="Save"><i class="icon-save"></i> Save</button>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        // COPY TO CLIPBOARD
        // Attempts to use .execCommand('copy') on a created text field
        // Falls back to a selectable alert if not supported
        // Attempts to display status in Bootstrap tooltip
        // ------------------------------------------------------------------------------

        function copyToClipboard(text, el) {
            var copyTest = document.queryCommandSupported('copy');
            var elOriginalText = el.attr('data-original-title');

            if (copyTest === true) {
                var copyTextArea = document.createElement("textarea");
                copyTextArea.value = text;
                document.body.appendChild(copyTextArea);
                copyTextArea.select();
                try {
                    var successful = document.execCommand('copy');
                    var msg = successful ? 'Kopyalandı!' : 'Whoops, kopyalanamadı!';
                    el.attr('data-original-title', msg).tooltip('show');
                } catch (err) {
                    console.log('Oops, unable to copy');
                }
                document.body.removeChild(copyTextArea);
                el.attr('data-original-title', elOriginalText);
            } else {
                // Fallback if browser doesn't support .execCommand('copy')
                window.prompt("Panoya kopyala: Ctrl+C ya da  Command+C, Enter", text);
            }
        }
        $(document).ready(function () {
            // Tooltips
            $('.js-tooltip').tooltip();

            // Copy to clipboard
            $('.copyToClipboard').click(function () {
                var text = $(this).text();
                var el = $(this);
                copyToClipboard(text, el);
            });
        });

    </script>
}  