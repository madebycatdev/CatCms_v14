@model PagedList.IPagedList<EuroCMS.Model.AccessRuleViewModel>
@using PagedList.Mvc; 

@{
    ViewBag.Title = "AccessRules";
}

<div class="tabbable tabbable-custom">
    <ul class="nav nav-tabs">
        <li class="@(Request["mode"] !="Edit" && Request["mode"] !="Create" ?"active":"")"><a data-toggle="tab" href="#tab_1_1">Existing Rules</a></li>
        <li class="@(Request["mode"] =="Edit" || Request["mode"] =="Create" ?"active":"")"><a data-toggle="tab" href="#tab_1_2">Create/Edit New Rule</a></li>
    </ul>
    <div class="tab-content">
        
        <div id="tab_1_1" class="tab-pane @(Request["mode"] !="Edit" && Request["mode"] !="Create" ? "active":"")">
            
            @using (Html.BeginForm("AccessRules", "Account", null, FormMethod.Get)) 
            {
                 <div class="row-fluid">
                    <div class="control-group">
                        <div class="controls">
                            @Html.DropDownList("contentType",
                                            new SelectListItem[]{ 
                                                new SelectListItem{ Text= "Site", Value="site", Selected = Convert.ToString(ViewBag.ContentType)=="site"},
                                                new SelectListItem{ Text= "ZoneGroup", Value="zonegroup", Selected = Convert.ToString(ViewBag.ContentType)=="zonegroup"} ,
                                                new SelectListItem{ Text= "Zone", Value="zone", Selected = Convert.ToString(ViewBag.ContentType)=="zone"} ,
                                                new SelectListItem{ Text= "Article", Value="article", Selected = Convert.ToString(ViewBag.ContentType)=="article"}
                                        },
                                        "Please Select",
                                        new { @id="contentType_" }
                                        )
                        </div>
                        <button class="btn">Filter</button>
                    </div>
                </div>
            }
            <div class="no-more-tables">

				<table class="table table-striped table-hove">
					<thead>
						<tr>
							<th>Rule Name</th>
							<th>Content Item</th>
							<th>Allowed Roles</th>
							@* <th>Allowed Users</th>*@
							<th>Allowed Permissions</th>
							<th>Created</th>
							<th> </th>
						</tr>
					</thead>
					<tbody>
						@foreach (var rule in Model)
						{ 
							<tr>
								<td data-title="Rule Name">@rule.RuleName</td>
								<td data-title="Content Item">@rule.ContentItemName.Left(50) <br /> <em>(Type: @rule.ContentType, ID: @rule.ContentId)</em></td>
								<td data-title="Allowed Roles">@rule.Roles.Left(50)</td>
								@* <td data-title="Allowed Users">@rule.Users.Left(50)</td>*@
								<td data-title="Allowed Permissions">@rule.Permissions.Left(50)</td>
								<td data-title="Created">@rule.Created.ToString("f") <br />
									by @rule.CreatedBy</td>
								<td data-title="">
									<a class="btn icn-only margin-bottom-5" href="@Url.Action("AccessRules", new { id = @rule.RuleId, mode="Edit" })" title="Edit This Rule"><i class="icon-edit"></i></a>

									@using (Html.BeginForm("DeleteAccessRule", "Account", new { id = @rule.RuleId }))
									{ 
										@Html.AntiForgeryToken()
										<button type="submit" class="btn icn-only margin-bottom-5 red" title="Delete This Rule" data-message="Are you sure?" onclick="return deleteObject(this);"><i class="icon-trash"></i></button>
									}
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

        <div id="tab_1_2" class="tab-pane @(Request["mode"] =="Edit" || Request["mode"] =="Create" ?"active":"")">
           
            @using (Html.BeginForm("CreateAccessRule", "Account", FormMethod.Post, new { @class = "form-horizontal" }))
            { 
                @Html.AntiForgeryToken()
                @Html.Hidden("RuleId", ViewBag.RuleId as string, new { @id = "RuleId" })
                <p>
                    This page provides you give to allow or deny access to contents. 
                    You can create an access rule for each content item. 
                </p>
                <div class="row-fluid">
                    <div class="control-group">
                        <label class="control-label" for="username">Name:<span class="red">*</span></label>
                        <div class="controls">
                            @Html.TextBox("ruleName", ViewBag.RuleName as string, new { @class = "m-wrap span6 required", @placeHolder = "Type a Rule Name" }) 
                            @Html.ValidationMessage("ruleName") 
                        </div>
                    </div>
                    <hr />
                    <div class="control-group">
                        <label class="control-label" for="type">Content Type:<span class="red">*</span></label>
                        <div class="controls">
                            @Html.Hidden("contentId", ViewBag.ContentId as string, new { @id = "contentId" })
                            @Html.DropDownList("contentType",
										new SelectListItem[]{ 
                                            new SelectListItem{ Text= "Please Select", Value=""} ,
                                            new SelectListItem{ Text= "Site", Value="site", Selected = Convert.ToString(ViewBag.ContentType)=="site"},
                                            new SelectListItem{ Text= "ZoneGroup", Value="zonegroup", Selected = Convert.ToString(ViewBag.ContentType)=="zonegroup"} ,
                                            new SelectListItem{ Text= "Zone", Value="zone", Selected = Convert.ToString(ViewBag.ContentType)=="zone"} ,
                                            new SelectListItem{ Text= "Article", Value="article", Selected = Convert.ToString(ViewBag.ContentType)=="article"}
                                    }, new { @class = "chosen-select required"})
                        </div>
                    </div>
                    <div class="control-group @(Convert.ToString(ViewBag.ContentType)=="site"?"":"hidden")" id="content_item_site">
                        <label class="control-label" for="site">Site:<span class="red">*</span></label>
                        <div class="controls">
                            @Html.TextBox("siteId", ViewBag.ContentItemName as string, new { @class = "m-wrap span3", @id = "site", @placeHolder = "Type a Site Name" }) 
                        </div>
                    </div>
                    <div class="control-group @(Convert.ToString(ViewBag.ContentType)=="zonegroup"?"":"hidden")" id="content_item_zonegroup">
                        <label class="control-label" for="roles">ZoneGroup:<span class="red">*</span></label>
                        <div class="controls">
                            @Html.TextBox("zoneGroupId", ViewBag.ContentItemName as string, new { @class = "m-wrap span3", @id = "zoneGroup", @placeHolder = "Type a Zone Group Name" }) 
                        </div>
                    </div>
                    <div class="control-group @(Convert.ToString(ViewBag.ContentType)=="zone"?"":"hidden")" id="content_item_zone">
                        <label class="control-label" for="roles">Zone:<span class="red">*</span></label>
                        <div class="controls">
                            @Html.TextBox("zoneId", ViewBag.ContentItemName as string, new { @class = "m-wrap span3", @id = "zone", @placeHolder = "Type a Zone Name" }) 
                        </div>
                    </div>
                    <div class="control-group @(Convert.ToString(ViewBag.ContentType)=="article"?"":"hidden")" id="content_item_article">
                        <label class="control-label" for="roles">Article:<span class="red">*</span></label>
                        <div class="controls">
                            @Html.TextBox("articleId", ViewBag.ContentItemName as string, new { @class = "m-wrap span3", @id = "article", @placeHolder = "Type a Article Headline" }) 
                        </div>
                    </div>
                    <hr />
                    <div class="control-group">
                        <label class="control-label" for="roles">Roles:<span class="red">*</span></label>
                        <div class="controls"> 
                            <div class="select2-container select2-container-multi span12">
                              <ul class="select2-choices">
                                <li class="select2-search-choice dn">
                                  <div></div>
                                  <a tabindex="-1" class="select2-search-choice-close" onclick="removeLabel(this);" href="#"></a>
                                </li>
                                <li class="select2-search-field">
                                    @Html.Hidden("roles", ViewBag.Roles as string, new { @id = "roles" })
                                    @Html.TextBox("role", ViewBag.Roles as string, new { @class = "m-wrap span12", @id = "role", @placeHolder = "Type a Role" })
                                </li>
                              </ul>
                            </div>
                        </div>
                    </div>
                   @* <div class="control-group">
                        <label class="control-label" for="users">Users: </label>
                        <div class="controls">
                            @Html.Hidden("users", ViewBag.Users as string, new { @id = "users" })
                            @Html.TextBox("user", "", new { @class = "m-wrap span3", @id = "user", @placeHolder = "Type a UserName" }) 
                        </div>
                    </div>*@
                     <div class="control-group">
                        <label class="control-label" for="users">Permissions:<span class="red">*</span></label>
                        <div class="controls">
                             
                            <label class="smallWrap" for="permission_Create">
                                @Html.CheckBox("permissions", (ViewBag.Permissions as string).Contains("Create"), new { id = "permission_Create", @value = "Create" })
                                Create
                            </label>
                            <label class="smallWrap margin-left-15" for="permission_Edit">
                                @Html.CheckBox("permissions", (ViewBag.Permissions as string).Contains("Edit"), new { id = "permission_Edit", @value = "Edit" })
                                Edit
                            </label>
                            <label class="smallWrap margin-left-15" for="permission_Delete">
                                @Html.CheckBox("permissions", (ViewBag.Permissions as string).Contains("Delete"), new { id = "permission_Delete", @value = "Delete" })
                                Delete
                            </label>
                            <label class="smallWrap margin-left-15" for="permission_Approve">
                                @Html.CheckBox("permissions", (ViewBag.Permissions as string).Contains("Approve"), new { id = "permission_Approve", @value = "Approve" })
                                Approve
                            </label>
                            <label class="smallWrap margin-left-15" for="permission_Discard">
                                @Html.CheckBox("permissions", (ViewBag.Permissions as string).Contains("Discard"), new { id = "permission_Discard", @value = "Discard" })
                                Discard
                            </label>
                            <label class="smallWrap margin-left-15" for="permission_List">
                                @Html.CheckBox("permissions", (ViewBag.Permissions as string).Contains("View"), new { id = "permission_List", @value = "View" })
                                List/View
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-actions">
                    <button class="btn green" type="submit" value="Save"><i class="icon-save"></i> Save</button>
                </div>
            }
        </div>
    </div>
</div>


<script type="text/javascript">
     
    var roleArr = [];

    Array.prototype.remove = function (from, to) {
        var rest = this.slice((to || from) + 1 || this.length);
        this.length = from < 0 ? this.length + from : from;
        return this.push.apply(this, rest);
    };

    function removeLabel(thisObj)
    {
        var arrIndex = roleArr.indexOf($(thisObj).prev().text());
        $(thisObj).parent("li").remove();

        if (arrIndex != -1) {
            roleArr.remove(arrIndex);
        }
        $("#roles").val(roleArr.join(","));

        return false;
    }

    $(document).ready(function () {
        $("#contentType").change(function () {

            $("#contentId").val("");

            $("div[id*='content_item_']").addClass("hidden");
            
            $("#content_item_" + $(this).val()).removeClass("hidden");
        });
 
    });

    $("#site").autocomplete({
        source: "@Url.Action("GetSitesAutoComplete")",
         minLength: 1,
         messages: {
             noResults: 'no result found.',
             results: function () { }
         },
         select: function (event, ui) {
             var key = ui.item.key;
             var contentId = $("#contentId");
             contentId.val(key);
         }
     }).data('ui-autocomplete')._renderItem = function (ul, item) {
         return $("<li>")
           .attr("data-value", item.key)
           .append("<a>" + item.value + "</a>")
           .appendTo(ul);
     };

    $("#zoneGroup").autocomplete({
        source: "@Url.Action("GetZoneGroupsAutoComplete")",
        minLength: 1,
        messages: {
            noResults: 'no result found.',
            results: function () { }
        },
        select: function (event, ui) {
            var key = ui.item.key;
            var contentId = $("#contentId");
            contentId.val(key);
        }
    }).data('ui-autocomplete')._renderItem = function (ul, item) {
        return $("<li>")
          .attr("data-value", item.key)
          .append("<a>" + item.value + "</a>")
          .appendTo(ul);
    };

    $("#zone").autocomplete({
        source: "@Url.Action("GetZonesAutoComplete")",
         minLength: 1,
         messages: {
             noResults: 'no result found.',
             results: function () { }
         },
         select: function (event, ui) {
             var key = ui.item.key;
             var contentId = $("#contentId");
             contentId.val(key);
         }
     }).data('ui-autocomplete')._renderItem = function (ul, item) {
         return $("<li>")
           .attr("data-value", item.key)
           .append("<a>" + item.value + "</a>")
           .appendTo(ul);
     };

    $("#article").autocomplete({
        source: "@Url.Action("GetArticlesAutoComplete")",
        minLength: 3,
        messages: {
            noResults: 'no result found.',
            results: function () { }
        },
        select: function (event, ui) {
            var key = ui.item.key;
            var contentId = $("#contentId");
            contentId.val(key);
        }
    }).data('ui-autocomplete')._renderItem = function (ul, item) {
        return $("<li>")
          .attr("data-value", item.key)
          .append("<a>" + item.value + "</a>")
          .appendTo(ul);
    };

    

    $("#role").autocomplete({
        source: "@Url.Action("GetRolesAutoComplete")",
        minLength: 1,
        messages: {
            noResults: 'no result found.',
            results: function () { }
        },
        select: function (event, ui) {
            var value = ui.item.value;
            var clones = $(".select2-choices li:first").clone();
            $(clones).find("div").text(value);
            $(clones).removeClass("dn");
            if ($(".select2-search-choice div:contains(" + value + ")").length == 0) {
                $(".select2-choices li:first").after(clones);
            } else {
                alert("This role is already selected.");
            }

            setTimeout(function () {
                $("#role").val("")
            }, 10);

            if (roleArr.indexOf(value) == -1)
            {
                roleArr.push(value);
            }
            $("#roles").val(roleArr.join(","));

            //var value = ui.item.value;
            //var roles = $("#roles");
            //roles.val(roles.val() + "," + value);
        },
        change: function () {
            //setTimeout(function () {
            //    $("#role").val("")
            //},100);
        }
    }).data('ui-autocomplete')._renderItem = function (ul, item) {
        return $("<li>")
          .attr("data-value", item.key)
          .append("<a>"+ item.value +"</a>")
          .appendTo(ul);
    };


    @*$("#user").autocomplete({
        source: "@Url.Action("GetUsersAutoComplete")",
        minLength: 1,
        messages: {
            noResults: 'no result found.',
            results: function () { }
        },
        select: function (event, ui) {
            var value = ui.item.value;
            var users = $("#users");
            users.val(users.val() + "," + value);
        }
    }).data('ui-autocomplete')._renderItem = function (ul, item) {
        return $("<li>")
          .attr("data-value", item.key)
          .append("<a>" + item.value + "</a>")
          .appendTo(ul);
    };*@
     
</script>

