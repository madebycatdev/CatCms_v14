@model PagedList.IPagedList<EuroCMS.Admin.entity.cms_article_search_result>
@using PagedList.Mvc;

<!-- BEGIN SAMPLE TABLE PORTLET-->

<script type="text/javascript">
    $(document).ready(function () {

        $(".chosen-select").chosen({
            width: "100%",
            allow_single_deselect: true
        });

    });
</script>

<div class="row-fluid">
    <div class="fl">
        <p><a class="btn blue" href="@Url.Action("Create", new { ClsfId = Request["ClsfId"] })">Article Create <i class="icon-circle-arrow-right"></i></a></p>
    </div>
</div>

@*<!--Arama-->*@

<div class="portlet box grey">
    <div class="portlet-title">
        <div class="caption"><i class="icon-reorder"></i>Article Search</div>
    </div>
    <div class="portlet-body form">
        @using (Html.BeginForm("Index", "Article", FormMethod.Get, new { @class = "form-horizontal", @id = "zEdit" }))
        {
            @Html.ValidationSummary(true)
            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="Keyword">Keyword:</label>
                    <div class="controls">
                        <input class="m-wrap span12" type="text" name="Keyword" id="Keyword" value="@ViewBag.Keyword" />
                    </div>
                </div>
                @*<div class="span6">
                        <div class="control-group">
                            <label class="control-label" for="article_classification">Article Classification:</label>
                            <div class="controls">

                            </div>
                        </div>
                    </div>*@
                @*<div class="span5">
                        <div class="control-group">
                            <label class="control-label" for="publisher">Publisher:</label>
                            <div class="controls">
                                <select class="span4">
                                    <option>Test</option>
                                    <option>Test2</option>
                                </select>
                            </div>
                        </div>
                    </div>*@
            </div>
            <div class="row-fluid hide">
                <div class="control-group">
                    <label class="control-label" for="ZoneGroupID">Zone Group:</label>
                    <div class="controls">
                        @*@Html.GroupDropList("ZoneGroupID2", ViewBag.ZoneGroups as List<GroupDropListItem>, ViewData["ZoneGroupID"].ToString(), new { @class = "m-wrap span5", @onchange = "getZoneListIndex(this.id)" }, "All Zone Groups")*@
                    </div>
                </div>
            </div>

            <div class="row-fluid hide">
                <div class="control-group">
                    <label class="control-label" for="ZoneID">Zone:</label>
                    <div class="controls">
                        @*<select name="ZoneID" id="ZoneID" class="m-wrap span5">
                                <option value="0">All Zones</option>
                            </select>*@
                        @*@Html.DropDownList("ZoneID2", ViewBag.Zones as List<SelectListItem>, "All Zones", new { @class = "m-wrap span5" })*@
                    </div>
                </div>
                <!-- Yukarıdaki zone group seçilince zone alanı dolucak. Zone/List controller ve action'ında JSON formatında alabilirsin. selected olması icin @ViewBag.ZoneID den seçili zoneID ye ulaşabilirsin. -->
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="ZoneID">Choose Zone:</label>
                    <div class="controls">
                        <select class="chosen-select" data-placeholder="Select Zone" name="ZoneID" id="ZoneID" tabindex="1">
                            <option></option>
                            @*<option value="0">Select Zone</option>*@
                            @if (ViewBag.ZoneList != null)
                            {
                                List<int> listZoneGroup = new List<int>();
                                List<EuroCMS.Model.Zone> listZones = new List<EuroCMS.Model.Zone>();
                                listZones = (List<EuroCMS.Model.Zone>)ViewBag.ZoneList;
                                listZoneGroup = listZones.Select(s => s.ZoneGroupId).Distinct().ToList();
                                for (int i = 0; i < listZoneGroup.Count; i++)
                                {
                                    List<EuroCMS.Model.Zone> listZoneByZoneGroup = new List<EuroCMS.Model.Zone>();
                                    listZoneByZoneGroup = listZones.Where(v => v.ZoneGroupId == listZoneGroup[i]).ToList();
                                    <optgroup label="@listZoneByZoneGroup.FirstOrDefault().ZoneGroup.Site.Name  - @HttpUtility.HtmlDecode(listZoneByZoneGroup.FirstOrDefault().ZoneGroup.Name)">
                                        @foreach (EuroCMS.Model.Zone zone in listZoneByZoneGroup)
                                        {
                                            if (zone.Id.ToString() == HttpContext.Current.Request["ZoneID"])
                                            {
                                                <option selected="selected" value="@zone.Id">@HttpUtility.HtmlDecode(zone.Name) - @zone.Id</option>
                                            }
                                            else
                                            {
                                                <option value="@zone.Id">@HttpUtility.HtmlDecode(zone.Name) - @zone.Id</option>
                                            }
                                        }
                                    </optgroup>
                                }


                            }
                            else
                            {
                                <option>Boş</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="IsRevision">Search In:</label>
                    <div class="controls">
                        <select class="chosen-select" name="IsRevision" id="IsRevision" onchange="showBlock(this);">
                            <option value="False" @(ViewBag.IsRevision == false ? "selected=selected" : "")>Articles</option>
                            <option value="True" @(ViewBag.IsRevision == true ? "selected=selected" : "")>Revisions</option>
                        </select>
                    </div>
                </div>
                <!-- on change sinde 1 ise Revision Flags alanı aktif olucak -->
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="Status0">Status: </label>
                    <div class="controls">
                        <label class="smallWrap">
                            <input type="checkbox" name="Status0" value="True" @(ViewBag.Status0 == true ? "checked=checked" : "")>
                            Active
                        </label>
                        <label class="smallWrap">
                            <input type="checkbox" name="Status1" value="True" @(ViewBag.Status1 == true ? "checked=checked" : "")>
                            Passive
                        </label>
                        <label class="smallWrap">
                            <input type="checkbox" name="Status2" value="True" @(ViewBag.Status2 == true ? "checked=checked" : "")>
                            Deleted
                        </label>
                        <div id="revision_status_block" class="hide">
                            <label class="smallWrap">
                                <input type="radio" name="Status" id="Status3" value="3" @(ViewBag.Status == 3 ? "checked=checked" : "")>
                                Approved
                            </label>
                            <label class="smallWrap">
                                <input type="radio" name="Status" id="Status4" value="4" @(ViewBag.Status == 4 ? "checked=checked" : "")>
                                Waiting Approval
                            </label>
                            <label class="smallWrap">
                                <input type="radio" name="Status" id="Status5" value="5" @(ViewBag.Status == 5 ? "checked=checked" : "")>
                                Waiting Delete
                            </label>
                            <label class="smallWrap">
                                <input type="radio" name="Status" id="Status6" value="6" @(ViewBag.Status == 6 ? "checked=checked" : "")>
                                Discarded
                            </label>
                            <label class="smallWrap">
                                <input type="radio" name="Status" id="Status7" value="7" @(ViewBag.Status == 7 ? "checked=checked" : "")>
                                Live
                            </label>
                            <label class="smallWrap">
                                <input type="radio" name="Status" id="Status8" value="8" @(ViewBag.Status == 8 ? "checked=checked" : "")>
                                Ex-Live
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label hide" id="revFlagLabel" for="RevFlag1">Revision Flags: </label>
                    <div id="revision_flag_block" class="controls hide">
                        <label class="smallWrap">
                            <input type="checkbox" name="RevFlag1" value="True" @(ViewBag.RevFlag1 == true ? "checked=checked" : "")>
                            Not Completed
                        </label>
                        <label class="smallWrap">
                            <input type="checkbox" name="RevFlag2" value="True" @(ViewBag.RevFlag2 == true ? "checked=checked" : "")>
                            Revise Later
                        </label>
                        <label class="smallWrap">
                            <input type="checkbox" name="RevFlag3" value="True" @(ViewBag.RevFlag3 == true ? "checked=checked" : "")>
                            Check Ext.Links
                        </label>
                        <label class="smallWrap">
                            <input type="checkbox" name="RevFlag4" value="True" @(ViewBag.RevFlag4 == true ? "checked=checked" : "")>
                            Custom Flag 1
                        </label>
                        <label class="smallWrap">
                            <input type="checkbox" name="RevFlag5" value="True" @(ViewBag.RevFlag5 == true ? "checked=checked" : "")>
                            Custom Flag 2
                        </label>
                    </div>
                </div>
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="Language">Language: </label>
                    <div class="controls">
                        @Html.DropDownList("Language", ViewBag.Languages as List<SelectListItem>, "", new { @class = "chosen-select", data_placeholder = "Select Language" })
                    </div>
                </div>
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="ArticleIDs">Article ID(s): </label>
                    <div class="controls">
                        <input type="text" name="ArticleIDs" id="ArticleIDs" class="m-wrap span6" value="@ViewBag.ArticleIDs" />
                        <span class="help-inline">Multiple article IDs separated by commas(,)</span>
                    </div>
                </div>
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="Alias">Article Alias: </label>
                    <div class="controls">
                        <input class="m-wrap span12" type="text" name="Alias" id="Alias" value="@HttpUtility.HtmlDecode(ViewBag.Alias)" />
                    </div>
                </div>
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="ClsfId">Classification: </label>
                    <div class="controls">
                        <select class="chosen-select" data-placeholder="Select Classification" name="ClsfId" id="ClsfId">
                            <option></option>
                            @{
            if (ViewBag.Classifications != null)
            {
                List<EuroCMS.Model.Classification> listClassification = new List<EuroCMS.Model.Classification>();
                listClassification = (List<EuroCMS.Model.Classification>)ViewBag.Classifications;
                foreach (EuroCMS.Model.Classification clsf in listClassification)
                {
                    if (ViewBag.ClassificationID == clsf.ID)
                    {
                        <option value="@clsf.ID" selected="selected">@HttpUtility.HtmlDecode(clsf.Name) - @clsf.ID</option>
                    }
                    else
                    {
                        <option value="@clsf.ID">@HttpUtility.HtmlDecode(clsf.Name) - @clsf.ID</option>
                    }

                }
            }
                            }
                        </select>

                    </div>
                </div>
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="UserId">User: </label>
                    <div class="controls">
                        <select class="chosen-select" data-placeholder="Select User" name="UserId" id="UserId">
                            <option></option>
                            @{
            if (ViewBag.Users != null)
            {
                List<EuroCMS.Model.vAspNetMembershipUser> listUser = new List<EuroCMS.Model.vAspNetMembershipUser>();
                listUser = (List<EuroCMS.Model.vAspNetMembershipUser>)ViewBag.Users;
                foreach (EuroCMS.Model.vAspNetMembershipUser user in listUser)
                {
                    string userFullName = "";
                    var userProfile = System.Web.Profile.ProfileBase.Create(user.UserName, false);
                    userFullName = userProfile.GetPropertyValue("System.FullName").ToString().Trim();
                    if (!string.IsNullOrEmpty(userFullName))
                    {
                        if (ViewBag.UserId == user.UserId)
                        {
                            <option value="@user.UserId" selected="selected">@HttpUtility.HtmlDecode(userFullName)</option>
                        }
                        else
                        {
                            <option value="@user.UserId">@HttpUtility.HtmlDecode(userFullName)</option>
                        }
                    }
                }
            }
                            }

                        </select>
                    </div>
                </div>
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="ZoneID">Choose Tag:</label>
                    <div class="controls">
                        <select class="chosen-select" data-placeholder="Select Tag" name="TagID" id="TagID" tabindex="1">
                            <option></option>
                            @*<option value="0">Select Zone</option>*@
                            @if (ViewBag.Tags != null)
                            {
                                List<EuroCMS.Model.Tag> tags = ViewBag.Tags as List<EuroCMS.Model.Tag>;
                                if (ViewBag.Articles == null)
                                {
                                    EuroCMS.Model.CmsDbContext dbContext = new EuroCMS.Model.CmsDbContext();
                                    ViewBag.Articles = dbContext.Articles.Where(x => x.Status == (byte)1 && !string.IsNullOrEmpty(x.TagContents)).ToList();
                                }

                                for (int i = 0; i < tags.Count; i++)
                                {
                                    if (!string.IsNullOrEmpty(tags[i].Text.ToString()))
                                    {
                                        List<EuroCMS.Model.Article> allArticles = ViewBag.Articles as List<EuroCMS.Model.Article>;
                                        int count = allArticles.Where(x => x.TagContents.ToLower().Contains(tags[i].Text.ToLower())).ToList().Count;


                                        if (HttpContext.Current.Request["TagID"] != null)
                                        {
                                            if (tags[i].Text.ToLower() == HttpContext.Current.Request["TagID"].ToLower())
                                            {
                                                <option selected="selected" value="@tags[i].Text.ToLower()">@HttpUtility.HtmlDecode(tags[i].Text) (@count)</option>
                                            }
                                            else
                                            {
                                                <option value="@tags[i].Text.ToLower()">@HttpUtility.HtmlDecode(tags[i].Text) (@count)</option>
                                            }
                                        }
                                        else
                                        {
                                            <option value="@tags[i].Text.ToLower()">@HttpUtility.HtmlDecode(tags[i].Text) (@count)</option>
                                        }
                                    }
                                }
                            }
                            else
                            {
                                <option>Boş</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="row-fluid">
                <div class="control-group">
                    <label class="control-label" for="fileTypes">File Types:</label>
                    <div class="controls">
                        <select class="chosen-select" data-placeholder="Select File Type" name="fileTypes" id="fileTypes" tabindex="1">
                            <option></option>
                            @*<option value="0">Select Zone</option>*@
                            @if (ViewBag.Tags != null)
                            {
                                List<SelectListItem> fTypes = ViewBag.FileTypes as List<SelectListItem>;

                                for (int i = 0; i < fTypes.Count; i++)
                                {
                                    if (!string.IsNullOrEmpty(fTypes[i].Text.ToString()))
                                    {
                                        if (HttpContext.Current.Request["fileTypes"] != null)
                                        {
                                            if (fTypes[i].Text.ToLower() == HttpContext.Current.Request["fileTypes"].ToLower())
                                            {
                                                <option selected="selected" value="@fTypes[i].Text.ToLower()">@HttpUtility.HtmlDecode(fTypes[i].Text)</option>
                                            }
                                            else
                                            {
                                                <option value="@fTypes[i].Text.ToLower()">@HttpUtility.HtmlDecode(fTypes[i].Text) - @fTypes[i].Value</option>
                                            }
                                        }
                                        else
                                        {
                                            <option value="@fTypes[i].Text.ToLower()">@HttpUtility.HtmlDecode(fTypes[i].Text) - @fTypes[i].Value</option>
                                        }
                                    }
                                }
                            }
                            else
                            {
                                <option>Boş</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <div class="form-actions">
                <button class="btn">Search Articles <i class="icon-search"></i></button>
            </div>
        }
    </div>
</div>

@*<!--\Arama-->*@

<!-- END SAMPLE TABLE PORTLET-->
@*<!--Listeleme-->*@
<strong>Result Count: </strong> @Model.TotalItemCount

@*<div class="row-fluid hide" title="Article Filters"></div>*@
<div class="no-more-tables">
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>#</th>
                <th>Status</th>
				<th>Order</th>
                <th>
                    @Html.ActionLink("Headline", "Index", new
                   {
                       SortOrder = ViewBag.HeadlineSortParam,
                       Keyword = ViewBag.Keyword,
                       ZoneGroupID = ViewData["ZoneGroupID"],
                       ZoneID = ViewBag.ZoneID,
                       IsRevision = ViewBag.IsRevision,
                       Status = ViewBag.Status,
                       Status0 = ViewBag.Status0,
                       Status1 = ViewBag.Status1,
                       Status2 = ViewBag.Status2,
                       RevFlag1 = ViewBag.RevFlag1,
                       RevFlag2 = ViewBag.RevFlag2,
                       RevFlag3 = ViewBag.RevFlag3,
                       RevFlag4 = ViewBag.RevFlag4,
                       RevFlag5 = ViewBag.RevFlag5,
                       Language = ViewBag.Language,
                       ArticleIDs = ViewBag.ArticleIDs,
                       Alias = ViewBag.Alias,
                       DisplayedStart = ViewBag.DisplayedStart,
                       DisplayedEnd = ViewBag.DisplayedEnd,
                       ModifiedStart = ViewBag.ModifiedStart,
                       ModifiedEnd = ViewBag.ModifiedEnd,
                       ApprovedStart = ViewBag.ApprovedStart,
                       ApprovedEnd = ViewBag.ApprovedEnd,
                       ClsfId = ViewBag.ClassificationID,
                       UserId = ViewBag.UserId
                   })
                </th>
                <th>
                    @Html.ActionLink("Displayed", "Index", new
                   {
                       SortOrder = ViewBag.DisplayedSortParam,
                       Keyword = ViewBag.Keyword,
                       ZoneGroupID = ViewData["ZoneGroupID"],
                       ZoneID = ViewBag.ZoneID,
                       IsRevision = ViewBag.IsRevision,
                       Status = ViewBag.Status,
                       Status0 = ViewBag.Status0,
                       Status1 = ViewBag.Status1,
                       Status2 = ViewBag.Status2,
                       RevFlag1 = ViewBag.RevFlag1,
                       RevFlag2 = ViewBag.RevFlag2,
                       RevFlag3 = ViewBag.RevFlag3,
                       RevFlag4 = ViewBag.RevFlag4,
                       RevFlag5 = ViewBag.RevFlag5,
                       Language = ViewBag.Language,
                       ArticleIDs = ViewBag.ArticleIDs,
                       Alias = ViewBag.Alias,
                       DisplayedStart = ViewBag.DisplayedStart,
                       DisplayedEnd = ViewBag.DisplayedEnd,
                       ModifiedStart = ViewBag.ModifiedStart,
                       ModifiedEnd = ViewBag.ModifiedEnd,
                       ApprovedStart = ViewBag.ApprovedStart,
                       ApprovedEnd = ViewBag.ApprovedEnd,
                       ClsfId = ViewBag.ClassificationID,
                       UserId = ViewBag.UserId
                   })
                </th>
				<th>Created/Updated</th>
                <th class="hide">
                    @Html.ActionLink("Clicks", "Index", new
                   {
                       SortOrder = ViewBag.ClicksSortParam,
                       Keyword = ViewBag.Keyword,
                       ZoneGroupID = ViewData["ZoneGroupID"],
                       ZoneID = ViewBag.ZoneID,
                       IsRevision = ViewBag.IsRevision,
                       Status = ViewBag.Status,
                       Status0 = ViewBag.Status0,
                       Status1 = ViewBag.Status1,
                       Status2 = ViewBag.Status2,
                       RevFlag1 = ViewBag.RevFlag1,
                       RevFlag2 = ViewBag.RevFlag2,
                       RevFlag3 = ViewBag.RevFlag3,
                       RevFlag4 = ViewBag.RevFlag4,
                       RevFlag5 = ViewBag.RevFlag5,
                       Language = ViewBag.Language,
                       ArticleIDs = ViewBag.ArticleIDs,
                       Alias = ViewBag.Alias,
                       DisplayedStart = ViewBag.DisplayedStart,
                       DisplayedEnd = ViewBag.DisplayedEnd,
                       ModifiedStart = ViewBag.ModifiedStart,
                       ModifiedEnd = ViewBag.ModifiedEnd,
                       ApprovedStart = ViewBag.ApprovedStart,
                       ApprovedEnd = ViewBag.ApprovedEnd,
                       ClsfId = ViewBag.ClassificationID,
                       UserId = ViewBag.UserId
                   })
                </th>
                <th width="145">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Count > 0)
            {
                foreach (var article in Model)
                {
                    <tr>
                        <td data-title="#"> @article.article_id </td>
                        <td data-title="Status">
                            @if (article.status == 1)
                            {
                                <i class="icon-ok green"></i>
                            }
                            else
                            {
                                <i class="icon-stop red"></i>
                            }
                        </td>
						<td data-title="Order">@article.az_order</td>
                        <td data-title="Headline" width="40%">
                            <h4 class="no-top-space">@HttpUtility.HtmlDecode(article.headline) </h4>
                            <p class="muted"><strong>Zone: </strong>@HttpUtility.HtmlDecode(article.zone_name)</p>
                        </td>
						<td data-title="Created/Updated">
							<p class="muted">Created: @article.created <br />
							Updated: @article.rev_date<br />
							Approved:@article.approval_date</p>
						</td>
                        <td data-title="Displayed">
                            <p class="muted">
                                <strong>Start: </strong>@article.startdate | <strong>End: </strong>@article.enddate
                            </p>
                        </td>
                        <td class="hide">@string.Format("{0:#,#}", article.clicks)</td>
                        <td data-title="Actions">
                            <a class="btn icn-only margin-bottom-5" target="_blank" href="@Url.Action("PreviewRevision", new { id= @article.rev_id, IsRevision=true })" title="Preview This Revision"><i class="icon-eye-close"></i></a>
                            <a class="btn icn-only margin-bottom-5" target="_blank" href="@Url.Action("Preview", new { id = @article.article_id, ZoneID = @article.zone_id })" title="Preview This Article"><i class="icon-eye-open"></i></a>
                            <a class="btn icn-only margin-bottom-5" target="_blank" href="@Url.Action("Edit", new { id = @article.article_id, ClsfId = Request["ClsfId"] })" title="Edit This Article"><i class="icon-edit"></i></a><br />
                            @using (Html.BeginForm("Duplicate", "Article", new { id = @article.article_id }))
                            {
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn icn-only margin-bottom-5" title="Duplicate This Article"><i class="icon-copy"></i></button>
                            }
                            @using (Html.BeginForm("Delete", "Article", new { id = @article.article_id }))
                            {
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn icn-only margin-bottom-5" title="Delete This Article" data-message="Are you sure want to remove this article?" onclick="return deleteObject(this);"><i class="icon-trash"></i></button>
                            }
                            <a class="btn icn-only margin-bottom-5" href="@Url.Action("Index", "ArticleFile", new { ArticleId = @article.article_id, RevisionId = @article.rev_id })" title="Article Files" data-message="Article Files" target="_blank"><i class="icon-picture"></i></a>


                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="4">No Result Found!</td></tr>
            }
        </tbody>
    </table>
</div>
@*<!--\Listeleme-->*@


@*<!--Pager-->*@
<strong>Page: </strong> @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager(Model, page => Url.Action("Index", new
{
    page,
    SortOrder = ViewBag.SortOrder,
    Keyword = ViewBag.Keyword,
    ZoneGroupID = ViewData["ZoneGroupID"],
    ZoneID = ViewBag.ZoneID,
    IsRevision = ViewBag.IsRevision,
    Status = ViewBag.Status,
    Status0 = ViewBag.Status0,
    Status1 = ViewBag.Status1,
    Status2 = ViewBag.Status2,
    RevFlag1 = ViewBag.RevFlag1,
    RevFlag2 = ViewBag.RevFlag2,
    RevFlag3 = ViewBag.RevFlag3,
    RevFlag4 = ViewBag.RevFlag4,
    RevFlag5 = ViewBag.RevFlag5,
    Language = ViewBag.Language,
    ArticleIDs = ViewBag.ArticleIDs,
    Alias = ViewBag.Alias,
    DisplayedStart = ViewBag.DisplayedStart,
    DisplayedEnd = ViewBag.DisplayedEnd,
    ModifiedStart = ViewBag.ModifiedStart,
    ModifiedEnd = ViewBag.ModifiedEnd,
    ApprovedStart = ViewBag.ApprovedStart,
    ApprovedEnd = ViewBag.ApprovedEnd,
    ClsfId = ViewBag.ClassificationID,
    UserId = ViewBag.UserId
}))
@*<!--\Pager-->*@